{% extends 'base.html' %}
{% load widget_tweaks %}

{% block title %}{% if is_edit %}Editar{% else %}Crear{% endif %} Actividad{% endblock %}

{% block extra_head %}
    <link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.bootstrap5.min.css" rel="stylesheet">
    <style>
        .group-row {
            border: 1px solid #dee2e6;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 10px;
            background-color: #f8f9fa;
        }
        .remove-group-btn {
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 3px;
            padding: 5px 10px;
            cursor: pointer;
        }
        .remove-group-btn:hover {
            background-color: #c82333;
        }
        #groups-container {
            max-height: 400px;
            overflow-y: auto;
        }
        .activity-type-info {
            margin-top: 15px;
            padding: 10px;
            border-radius: 5px;
        }
        .individual-info {
            background-color: #e3f2fd;
            border-left: 4px solid #2196f3;
        }
        .multi-group-info {
            background-color: #fff3e0;
            border-left: 4px solid #ff9800;
        }
    </style>
{% endblock %}

{% block content %}
<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h3 class="mb-0">
                        {% if is_edit %}
                            <i class="bi bi-pencil"></i> Editar Actividad
                        {% else %}
                            <i class="bi bi-plus-circle"></i> Crear Actividad
                        {% endif %}
                    </h3>
                </div>
                <div class="card-body">
                    {% if form.errors %}
                        <div class="alert alert-danger">
                            <ul class="mb-0">
                                {% for field, errors in form.errors.items %}
                                    {% for error in errors %}
                                        <li>{{ error }}</li>
                                    {% endfor %}
                                {% endfor %}
                            </ul>
                        </div>
                    {% endif %}
                    
                    <form method="post" novalidate>
                        {% csrf_token %}
                        
                        <!-- Datos comunes de la actividad -->
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="{{ form.nombre.id_for_label }}" class="form-label">Nombre de la Actividad</label>
                                {% render_field form.nombre class="form-control" placeholder="ej. Examen Final" %}
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                <label for="{{ form.tipo_actividad.id_for_label }}" class="form-label">Tipo de Actividad</label>
                                {% render_field form.tipo_actividad class="form-select" %}
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12 mb-3">
                                <label for="{{ form.asignaturas.id_for_label }}" class="form-label">Asignaturas</label>
                                {% render_field form.asignaturas id="id_asignaturas" %}
                                <div class="form-text">Seleccione las asignaturas para las que se realizará esta actividad.</div>
                            </div>
                        </div>

                        <!-- Campos de evaluación -->
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <div class="form-check">
                                    {% render_field form.evaluable class="form-check-input" %}
                                    <label for="{{ form.evaluable.id_for_label }}" class="form-check-label">Evaluable</label>
                                </div>
                            </div>
                            
                            <div class="col-md-4 mb-3">
                                <label for="{{ form.porcentaje_evaluacion.id_for_label }}" class="form-label">% Evaluación</label>
                                {% render_field form.porcentaje_evaluacion class="form-control" %}
                            </div>
                            
                            <div class="col-md-4 mb-3">
                                <div class="form-check">
                                    {% render_field form.no_recuperable class="form-check-input" %}
                                    <label for="{{ form.no_recuperable.id_for_label }}" class="form-check-label">No Recuperable</label>
                                </div>
                            </div>
                        </div>

                        <hr>

                        <!-- Selector de tipo de actividad -->
                        <div class="mb-3">
                            <h5><i class="bi bi-gear"></i> Configuración de Grupos</h5>
                            <div class="btn-group w-100" role="group" aria-label="Tipo de actividad">
                                <input type="radio" class="btn-check" name="activity_type" id="individual_type" value="individual" checked>
                                <label class="btn btn-outline-primary" for="individual_type">
                                    <i class="bi bi-person"></i> Actividad Individual
                                </label>

                                <input type="radio" class="btn-check" name="activity_type" id="multi_group_type" value="multi_group">
                                <label class="btn btn-outline-warning" for="multi_group_type">
                                    <i class="bi bi-people"></i> Actividad Multi-Grupo
                                </label>
                            </div>
                        </div>

                        <!-- Información del tipo seleccionado -->
                        <div id="individual-info" class="activity-type-info individual-info">
                            <i class="bi bi-info-circle"></i>
                            <strong>Actividad Individual:</strong> Se creará una actividad con un solo grupo y horario.
                        </div>

                        <div id="multi-group-info" class="activity-type-info multi-group-info" style="display: none;">
                            <i class="bi bi-info-circle"></i>
                            <strong>Actividad Multi-Grupo:</strong> Misma actividad para diferentes grupos con horarios específicos.
                        </div>

                        <!-- Contenedor para grupos (siempre presente) -->
                        <div id="groups-section">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 id="groups-title"><i class="bi bi-calendar"></i> Horario</h5>
                                <button type="button" id="add-group-btn" class="btn btn-success btn-sm" style="display: none;">
                                    <i class="bi bi-plus"></i> Añadir Grupo
                                </button>
                            </div>

                            <div id="groups-container">
                                <!-- Los grupos se añadirán aquí dinámicamente -->
                            </div>
                        </div>

                        {% render_field form.grupos_data %}

                        <div class="d-flex justify-content-between mt-4">
                            <a href="javascript:history.back()" class="btn btn-secondary">
                                <i class="bi bi-arrow-left"></i> Cancelar
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-check"></i> {% if is_edit %}Actualizar{% else %}Crear{% endif %} Actividad
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
    <script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('=== UNIFIED ACTIVITY FORM SCRIPT STARTED ===');
            
            // Initialize multi-select for subjects
            const asignaturasElement = document.getElementById('id_asignaturas');
            if (asignaturasElement) {
                const options = asignaturasElement.querySelectorAll('option');
                options.forEach(option => {
                    if (!option.value || option.value.trim() === '' || option.value === 'undefined') {
                        if (option.value !== '' || option.textContent.trim() === '') {
                            option.remove();
                        }
                    }
                });

                try {
                    new TomSelect("#id_asignaturas", {
                        plugins: ['remove_button'],
                        maxItems: null,
                        closeAfterSelect: true
                    });
                } catch (error) {
                    console.warn('TomSelect initialization failed:', error);
                }
            }

            let groupCounter = 0;
            const groupsContainer = document.getElementById('groups-container');
            const groupsDataInput = document.getElementById('id_grupos_data');
            const addGroupBtn = document.getElementById('add-group-btn');
            const groupsTitle = document.getElementById('groups-title');
            const individualRadio = document.getElementById('individual_type');
            const multiGroupRadio = document.getElementById('multi_group_type');
            const individualInfo = document.getElementById('individual-info');
            const multiGroupInfo = document.getElementById('multi-group-info');

            // Activity type change handlers
            function updateActivityType() {
                const isMultiGroup = multiGroupRadio.checked;
                
                if (isMultiGroup) {
                    // Multi-group mode
                    addGroupBtn.style.display = 'inline-block';
                    groupsTitle.innerHTML = '<i class="bi bi-people"></i> Grupos y Horarios';
                    individualInfo.style.display = 'none';
                    multiGroupInfo.style.display = 'block';
                    
                    // Ensure at least one group exists
                    if (groupsContainer.children.length === 0) {
                        addGroup();
                    }
                } else {
                    // Individual mode
                    addGroupBtn.style.display = 'none';
                    groupsTitle.innerHTML = '<i class="bi bi-calendar"></i> Horario';
                    individualInfo.style.display = 'block';
                    multiGroupInfo.style.display = 'none';
                    
                    // Clear all groups and add a single one
                    groupsContainer.innerHTML = '';
                    addGroup('Principal');
                }
                
                updateGroupsData();
            }

            individualRadio.addEventListener('change', updateActivityType);
            multiGroupRadio.addEventListener('change', updateActivityType);

            // Template for new group row
            function createGroupRow(data = {}, groupName = '') {
                groupCounter++;
                const row = document.createElement('div');
                row.className = 'group-row';
                row.setAttribute('data-group-id', groupCounter);
                
                const isMultiGroup = multiGroupRadio.checked;
                const showRemoveButton = isMultiGroup && groupsContainer.children.length > 0;
                
                row.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6 class="text-primary mb-0 group-title">
                            <i class="bi bi-${isMultiGroup ? 'people-fill' : 'calendar-event'}"></i> 
                            <span class="group-number">${isMultiGroup ? 'Grupo #1' : 'Horario'}</span>
                        </h6>
                        ${showRemoveButton ? `
                        <button type="button" class="remove-group-btn" onclick="removeGroup(${groupCounter})">
                            <i class="bi bi-x"></i> Eliminar
                        </button>
                        ` : ''}
                    </div>
                    
                    <div class="row">
                        <div class="col-md-${isMultiGroup ? '2' : '3'} mb-3" ${isMultiGroup ? '' : 'style="display: none;"'}>
                            <label class="form-label">Nombre del Grupo</label>
                            <input type="text" class="form-control group-name" 
                                   placeholder="ej. A, B, 1, 2" value="${groupName || data.grupo || ''}">
                        </div>
                        
                        <div class="col-md-${isMultiGroup ? '2' : '3'} mb-3">
                            <label class="form-label">Fecha/Hora Inicio</label>
                            <input type="datetime-local" class="form-control group-start" 
                                   value="${data.fecha_inicio || ''}" required>
                        </div>
                        
                        <div class="col-md-${isMultiGroup ? '2' : '3'} mb-3">
                            <label class="form-label">Fecha/Hora Fin</label>
                            <input type="datetime-local" class="form-control group-end" 
                                   value="${data.fecha_fin || ''}" required>
                        </div>
                        
                        <div class="col-md-${isMultiGroup ? '3' : '3'} mb-3">
                            <label class="form-label">Lugar</label>
                            <input type="text" class="form-control group-lugar" 
                                   placeholder="ej. Aula A1, Lab. Informática" value="${data.lugar || ''}">
                        </div>
                        
                        <div class="col-md-${isMultiGroup ? '3' : '12'} mb-3">
                            <label class="form-label">Descripción</label>
                            <textarea class="form-control group-desc" rows="2" 
                                      placeholder="Instrucciones específicas del grupo">${data.descripcion || ''}</textarea>
                        </div>
                    </div>
                `;
                
                return row;
            }

            // Add group function
            function addGroup(groupName = '') {
                const newRow = createGroupRow({}, groupName);
                groupsContainer.appendChild(newRow);
                renumberGroups();
                updateGroupsData();
            }

            // Add group button event
            addGroupBtn.addEventListener('click', function(e) {
                e.preventDefault();
                addGroup();
            });

            // Renumber all groups consecutively
            function renumberGroups() {
                const groupRows = document.querySelectorAll('.group-row');
                const isMultiGroup = multiGroupRadio.checked;
                
                groupRows.forEach((row, index) => {
                    const groupNumber = row.querySelector('.group-number');
                    const removeBtn = row.querySelector('.remove-group-btn');
                    
                    if (groupNumber) {
                        if (isMultiGroup) {
                            groupNumber.textContent = `Grupo #${index + 1}`;
                        } else {
                            groupNumber.textContent = 'Horario';
                        }
                    }
                    
                    // Show/hide remove button based on mode and count
                    if (removeBtn) {
                        removeBtn.style.display = (isMultiGroup && groupRows.length > 1) ? 'inline-block' : 'none';
                    }
                });
            }

            // Remove group function
            window.removeGroup = function(groupId) {
                const row = document.querySelector(`[data-group-id="${groupId}"]`);
                if (row && groupsContainer.children.length > 1) {
                    row.remove();
                    renumberGroups();
                    updateGroupsData();
                }
            };

            // Update hidden field with groups data
            function updateGroupsData() {
                const groups = [];
                const groupRows = document.querySelectorAll('.group-row');
                const isMultiGroup = multiGroupRadio.checked;
                
                groupRows.forEach((row, index) => {
                    const grupo = isMultiGroup ? 
                        (row.querySelector('.group-name')?.value || `${index + 1}`) :
                        'Principal';
                    const fechaInicio = row.querySelector('.group-start')?.value || '';
                    const fechaFin = row.querySelector('.group-end')?.value || '';
                    const descripcion = row.querySelector('.group-desc')?.value || '';
                    
                    if (fechaInicio && fechaFin) {
                        groups.push({
                            grupo: grupo,
                            fecha_inicio: fechaInicio,
                            fecha_fin: fechaFin,
                            descripcion: descripcion
                        });
                    }
                });
                
                groupsDataInput.value = JSON.stringify(groups);
            }

            // Update data on input changes
            groupsContainer.addEventListener('input', updateGroupsData);

            // Initialize with default state
            updateActivityType();

            // Load initial groups if editing
            {% if form.grupos_data.value %}
                const initialGroups = JSON.parse('{{ form.grupos_data.value|escapejs }}');
                if (initialGroups.length > 1) {
                    multiGroupRadio.checked = true;
                    updateActivityType();
                }
                
                groupsContainer.innerHTML = '';
                initialGroups.forEach(groupData => {
                    const newRow = createGroupRow(groupData);
                    groupsContainer.appendChild(newRow);
                });
                renumberGroups();
                updateGroupsData();
            {% endif %}
        });
    </script>
{% endblock %}