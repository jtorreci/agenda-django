from django.core.management.base import BaseCommand
from django.utils import timezone
import pytz
from datetime import timedelta

class Command(BaseCommand):
    help = 'Corrige las fechas de actividades que se guardaron con zona horaria incorrecta'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simular la corrección sin aplicar cambios',
        )
        parser.add_argument(
            '--offset-hours',
            type=int,
            default=1,
            help='Horas a ajustar (default: 1 hora)',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        offset_hours = options['offset_hours']
        
        madrid_tz = pytz.timezone('Europe/Madrid')
        
        self.stdout.write(f"{'SIMULANDO' if dry_run else 'APLICANDO'} corrección de zona horaria...")
        self.stdout.write(f"Ajuste: {offset_hours} horas")
        
        # Usar SQL directo para evitar problemas con campos que no existen en el modelo
        from django.db import connection
        
        actividades_count = 0
        versiones_count = 0
        
        if not dry_run:
            # Aplicar cambios reales
            with connection.cursor() as cursor:
                # Actualizar fechas de actividades
                cursor.execute(
                    "UPDATE schedule_actividad SET fecha_inicio = fecha_inicio + INTERVAL %s HOUR",
                    [offset_hours]
                )
                cursor.execute(
                    "UPDATE schedule_actividad SET fecha_fin = fecha_fin + INTERVAL %s HOUR",
                    [offset_hours]
                )
                
                # Contar actividades actualizadas
                cursor.execute("SELECT COUNT(*) FROM schedule_actividad")
                actividades_count = cursor.fetchone()[0]
                
                # Actualizar versiones si la tabla existe
                try:
                    cursor.execute(
                        "UPDATE schedule_actividadversion SET fecha_inicio = fecha_inicio + INTERVAL %s HOUR",
                        [offset_hours]
                    )
                    cursor.execute(
                        "UPDATE schedule_actividadversion SET fecha_fin = fecha_fin + INTERVAL %s HOUR", 
                        [offset_hours]
                    )
                    cursor.execute("SELECT COUNT(*) FROM schedule_actividadversion")
                    versiones_count = cursor.fetchone()[0]
                except Exception as e:
                    self.stdout.write(f"Tabla schedule_actividadversion no encontrada o error: {e}")
                    versiones_count = 0
        else:
            # Modo simulación - solo mostrar qué se cambiaría
            with connection.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM schedule_actividad")
                actividades_count = cursor.fetchone()[0]
                
                try:
                    cursor.execute("SELECT COUNT(*) FROM schedule_actividadversion")
                    versiones_count = cursor.fetchone()[0]
                except:
                    versiones_count = 0
                
                # Mostrar ejemplos de cambios
                if actividades_count > 0:
                    self.stdout.write(f"\nSe ajustarían las fechas de {actividades_count} actividades:")
                    cursor.execute("SELECT nombre, fecha_inicio, fecha_fin FROM schedule_actividad LIMIT 3")
                    samples = cursor.fetchall()
                    for nombre, inicio, fin in samples:
                        nuevo_inicio = inicio + timedelta(hours=offset_hours)
                        nuevo_fin = fin + timedelta(hours=offset_hours)
                        self.stdout.write(f"  '{nombre}':")
                        self.stdout.write(f"    Inicio: {inicio} -> {nuevo_inicio}")
                        self.stdout.write(f"    Fin: {fin} -> {nuevo_fin}")
        
        self.stdout.write(
            self.style.SUCCESS(
                f"{'Simuladas' if dry_run else 'Corregidas'} {actividades_count} actividades "
                f"y {versiones_count} versiones de actividades"
            )
        )
        
        if dry_run:
            self.stdout.write(
                self.style.WARNING(
                    "Ejecuta sin --dry-run para aplicar los cambios"
                )
            )